%YAML:1.0

#common parameters
#support: 1 imu 1 cam; 1 imu 2 cam: 2 cam; 
imu: 1         
num_of_cam: 1  

imu_topic: "/dvs/imu"
# imu_topic: "/imu/data"
image0_topic: "/dvs/image_raw"
# image0_topic: "/camera/image_color"
# image0_topic: "/dvs_rendering"
image1_topic: "/dvs/image_raw"
event_topic: "/dvs/events"
debug_image_topic: "/dvs_rendering"
output_path: "/home/zj/dataset/agilex/result/vinsbionicresult"
path_output_name: "/agilex_path_20230317campus01_loop.txt"
contribute_output_name: "/contribute_agilex_path_20230317campus01_loop.txt"

cam0_calib: "davis346_on_agilex.yaml"
camE_calib: "davis346_on_agilex.yaml"
# cam1_calib: "cam1_mei.yaml"
image_width: 346
image_height: 260
event_width: 346
event_height: 260
# event accumulate settings : event_dt=ms
event_dt: 20
event_sum: 20000
event_min: 10000
#v2dt params:
usev2dt: 1
acc_ratio: 0.3
gyro_ratio: 3
const_amagi: 3

# Extrinsic parameter between IMU and Camera.
estimate_extrinsic: 1   # 0  Have an accurate extrinsic parameters. We will trust the following imu^R_cam, imu^T_cam, don't change it.
                        # 1  Have an initial guess about extrinsic parameters. We will optimize around your initial guess.

body_T_cam0: !!opencv-matrix
# body_T_cam0:
   rows: 4
   cols: 4
   dt: d
   data: [ 9.9996063065673269e-01, 1.5861689393856535e-03,-8.7304756276543206e-03, -2.0490146129231107e-03,
       -1.7030431697734455e-03, 9.9990882178092955e-01,-1.3395811607929849e-02, 2.5306128111925001e-02,
       8.7084315781445921e-03, 1.3410152600510865e-02,9.9987215734146717e-01, 6.5944022599514679e-02, 
       0.0, 0.0, 0.0, 1.0 ]
#    data: [ 0.99937 , -0.0206405,  -0.0288663,-0.000222492,
#          0.0208865 ,   0.999748,  0.00824417,0.0094416,
#          0.0286889, -0.00884189 ,   0.999549,0.0723974,
#          0,0,0,1]
# extirnsic tic: -0.000222492    0.0094416    0.0723974
# extrinsic ric:  -0.113814  -0.599998 0.00296562

body_T_Event: !!opencv-matrix
# body_T_Event:
   rows: 4
   cols: 4
   dt: d
   data: [ 9.9996063065673269e-01, 1.5861689393856535e-03,-8.7304756276543206e-03, -2.0490146129231107e-03,
       -1.7030431697734455e-03, 9.9990882178092955e-01,-1.3395811607929849e-02, 2.5306128111925001e-02,
       8.7084315781445921e-03, 1.3410152600510865e-02,9.9987215734146717e-01, 6.5944022599514679e-02, 
       0.0, 0.0, 0.0, 1.0 ]


gyrobiasinit: [-0.00243417 ,-0.00447409 ,-0.00148653]
# gyrobiasinit: [0.0527066,0.0287401]
#Multiple thread support
multiple_thread: 1

#feature traker paprameters
max_cnt: 150            # max feature number in feature tracking
min_dist: 16            # min distance between two features 
freq: 0                # frequence (Hz) of publish tracking result. At least 10Hz for good estimation. If set 0, the frequence will be same as raw image 
F_threshold: 1.0        # ransac threshold (pixel)
show_track: 1           # publish tracking image as topic
flow_back: 1            # perform forward and backward optical flow to improve feature tracking accuracy

#optimization parameters
max_solver_time: 0.04  # max solver itration time (ms), to guarantee real time
max_num_iterations: 8   # max solver itrations, to guarantee real time
keyframe_parallax: 10.0 # keyframe selection threshold (pixel)

#imu parameters       The more accurate parameters you provide, the better performance
acc_n: 4.1536677364477449e-02          # accelerometer measurement noise standard deviation. 
gyr_n: 3.1922971452884330e-03         # gyroscope measurement noise standard deviation.     
acc_w: 5.0002927669557566e-04        # accelerometer bias random work noise standard deviation.  
gyr_w: 3.2633786787250474e-05       # gyroscope bias random work noise standard deviation.     
g_norm: 9.81007     # gravity magnitude

#unsynchronization parameters
estimate_td: 0                     # online estimate time offset between camera and imu
td: 0.002
                            # initial value of time offset. unit: s. readed image clock + td = real image clock (IMU clock)

#loop closure parameters
load_previous_pose_graph: 0        # load and reuse previous pose graph; load from 'pose_graph_save_path'
pose_graph_save_path: "/home/zj/dataset/agilex/result" # save and load path
save_image: 1                   # save image in pose graph for visualization prupose; you can close this function by setting 0 

equalize: 1
